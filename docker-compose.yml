version: '3.8'

services:
  # PostgreSQL Database
  postgres:
    image: postgres:15-alpine
    container_name: saudicord-db
    environment:
      POSTGRES_USER: ${DB_USER:-postgres}
      POSTGRES_PASSWORD: ${DB_PASSWORD:-saudicord123}
      POSTGRES_DB: ${DB_NAME:-saudicord}
    volumes:
      - postgres_data:/var/lib/postgresql/data
    ports:
      - "5432:5432"
    networks:
      - saudicord-network
    healthcheck:
      test: ["CMD-SHELL", "pg_isready -U postgres"]
      interval: 10s
      timeout: 5s
      retries: 5

  # SaudiCord Application
  saudicord:
    build: .
    container_name: saudicord-app
    depends_on:
      postgres:
        condition: service_healthy
    environment:
      # Server Configuration
      NODE_ENV: production
      PORT: 5000
      
      # Database Configuration
      DB_HOST: postgres
      DB_PORT: 5432
      DB_NAME: ${DB_NAME:-saudicord}
      DB_USER: ${DB_USER:-postgres}
      DB_PASSWORD: ${DB_PASSWORD:-saudicord123}
      
      # JWT Secret (IMPORTANT: Change this in production!)
      JWT_SECRET: ${JWT_SECRET:-your-super-secret-jwt-key-change-this}
      
      # Client URL
      CLIENT_URL: ${CLIENT_URL:-http://localhost:3000}
      
      # WebRTC Configuration
      STUN_SERVER: stun:stun.l.google.com:19302
    volumes:
      - ./uploads:/app/server/uploads
      - ./server/.env:/app/server/.env:ro
    ports:
      - "5000:5000"
    networks:
      - saudicord-network
    restart: unless-stopped

  # Nginx Reverse Proxy (Optional - for production)
  nginx:
    image: nginx:alpine
    container_name: saudicord-nginx
    depends_on:
      - saudicord
    volumes:
      - ./nginx.conf:/etc/nginx/nginx.conf:ro
      - ./ssl:/etc/nginx/ssl:ro
    ports:
      - "80:80"
      - "443:443"
    networks:
      - saudicord-network
    restart: unless-stopped

networks:
  saudicord-network:
    driver: bridge

volumes:
  postgres_data:
    driver: local
